import com.hypherionmc.modpublisher.properties.ReleaseType

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "xyz.wagyourtail.unimined" version "1.2.9"
    id "com.hypherionmc.modutils.modpublisher" version "2.1.+"
    id "com.hypherionmc.modutils.orion" version "1.0.20"
}

orion.setup {
    enableMirrorMaven = true
    enableReleasesMaven = true
    enableSnapshotsMaven = true

    dopplerToken = System.getenv("DOPPLER_KEY")

    versioning {
        var relType = project.properties["releaseType"] ?: "${release_type}"
        identifier("${relType}")
    }

    tools {
        lombok()
        noLoader()
    }
}

group = project_group
archivesBaseName = "${mod_name.replace(" ", "")}-Universal"

repositories {
    mavenCentral()
}

configurations {
    shade
    modCompileOnly
    implementation.extendsFrom shade
    compileOnly.extendsFrom modCompileOnly
}

dependencies {
    shade("com.coreoz:wisp:${wisp}")
    shade("ch.eitchnet:cron:${cron}")

    implementation "com.hypherionmc.craterlib:CraterLib-Common-1.20.4:${craterlib}:dev"
}

jar {
    setArchiveClassifier("slim")
    finalizedBy(shadowJar)
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version
        ])
    }
}

/**
 * ===============================================================================
 * =       DO NOT EDIT BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING        =
 * ===============================================================================
 */

unimined.minecraft {
    version minecraft_version

    fabric {
        loader fabric_loader
    }

    mappings {
        mojmap()
        devNamespace "mojmap"
    }

    defaultRemapJar = false
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

processResources {
    def buildProps = project.properties.clone()

    filesMatching(['pack.mcmeta', 'fabric.mod.json', "META-INF/mods.toml", "META-INF/neoforge.mods.toml"]) {
        expand buildProps
    }
}

var shadowPath = "me.hypherionmc.mmode.shadow"

shadowJar {
    from sourceSets.main.output
    configurations = [project.configurations.shade]
    setArchiveClassifier(null)

    dependencies {
        relocate "fc.cron", "${shadowPath}.cron"
        relocate "com.coreoz.wisp", "${shadowPath}.coreoz.wisp"
    }

    exclude("org/slf4j/**")
    exclude("META-INF/maven/**")
}

shadowJar.doLast {
    delete(jar.getArchiveFile())
}

publisher {
    apiKeys {
        modrinth(System.getenv("MODRINTH_TOKEN"))
        curseforge(System.getenv("CURSE_TOKEN"))
        nightbloom(System.getenv("PLATFORM_KEY"))
    }

    setCurseID(curse_id)
    setModrinthID(modrinth_id)
    setNightbloomID("mmode")
    setProjectVersion(project.version.toString())
    setReleaseType(ReleaseType.RELEASE)
    setChangelog("https://raw.githubusercontent.com/hypherionmc/changelogs/main/mmode/combo.md")
    setDisplayName("Maintenance Mode Universal - ${project.version}")
    setGameVersions("1.18.2", "1.19.2", "1.19.3", "1.19.4", "1.20", "1.20.1", "1.20.2", "1.20.3", "1.20.4", "1.21", "1.21.1")
    setLoaders("forge", "fabric", "quilt", "neoforge")
    setCurseEnvironment("both")
    setArtifact(shadowJar)

    modrinthDepends {
        required("Nn8Wasaq")
    }

    curseDepends {
        required("craterlib")
    }

    nightbloomDepends {
        required("craterlib")
    }
}