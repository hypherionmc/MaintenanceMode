subprojects {

    apply plugin: 'java'

    //java.toolchain.languageVersion = JavaLanguageVersion.of(8)

    def version_base = "${version}"

    ext {
        release=project.properties['release'] ?: false
    }

    version = version_base + (patch > 0 ? ".${patch}" : "")

    // Jenkins
    if (!release && System.getenv('BUILD_NUMBER') != null) {
        version = version_base + "." + System.getenv('BUILD_NUMBER') + "d"
    }

    jar {
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestampe'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version,
                "FMLCorePlugin": mod_core_plugin.replace('${mod_group}', group).replace('${mod_id}', mod_id),
                "FMLCorePluginContainsFMLMod": "false",
                "ForceLoadAsMod": "true",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": "0",
                "MixinConfigs": "mmode.forge.mixins.json"
            ])
        }
    }

    repositories {

        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    task preClean {
        delete "$buildDir/libs"
        delete "$rootDir/artifacts"
    }

}
