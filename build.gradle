plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.0'
    id "xyz.wagyourtail.unimined" version "1.1.0-SNAPSHOT"
    id "com.hypherionmc.modutils.modpublisher" version "2.1.+"
    id "com.hypherionmc.modutils.orion" version "1.0.+"
}

orion.setup {
    enableMirrorMaven = true
    enableReleasesMaven = true
    enableSnapshotsMaven = true

    dopplerToken = System.getenv("DOPPLER_KEY")

    versioning {
        var relType = project.properties["releaseType"] ?: "${release_type}"
        identifier("${relType}")
    }
}

group = project_group
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21
archivesBaseName = "${mod_name.replace(" ", "")}-Universal"

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    shade
    modCompileOnly
    implementation.extendsFrom shade
    compileOnly.extendsFrom modCompileOnly
}

dependencies {
    shade("org.apache.commons:commons-compress:${commons_compress}")

    compileOnly("org.projectlombok:lombok:${lombok}")
    annotationProcessor("org.projectlombok:lombok:${lombok}")

    implementation "com.hypherionmc.craterlib:CraterLib-Common-1.21:2.1.0+port.0:dev"
    implementation "com.hypherionmc.noloaderthanks:noloaderthanks:1.0.0"
}

jar {
    setArchiveClassifier("slim")
    finalizedBy(shadowJar)
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version
        ])
    }
}

/**
 * ===============================================================================
 * =       DO NOT EDIT BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING        =
 * ===============================================================================
 */

unimined.minecraft {
    version minecraft_version

    fabric {
        loader fabric_loader
    }

    mappings {
        mojmap()
        devNamespace "mojmap"
    }

    defaultRemapJar = false
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 21
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

processResources {
    def buildProps = project.properties.clone()

    filesMatching(['pack.mcmeta', 'fabric.mod.json', "META-INF/mods.toml", "META-INF/neoforge.mods.toml"]) {
        expand buildProps
    }
}

shadowJar {
    from sourceSets.main.output
    configurations = [project.configurations.shade]
    setArchiveClassifier(null)

    dependencies {
        relocate "org.apache.commons", "shadow.apache.commons"
    }
}

shadowJar.doLast {
    delete(jar.getArchiveFile())
}