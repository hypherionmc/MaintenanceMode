buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id "com.modrinth.minotaur" version "2.2.0"
    id "me.hypherionmc.cursegradle" version "2.0.1"
    id "signing"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

archivesBaseName = "${mod_name}-forge-${minecraft_version}"
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'fml.coreMods.load', mod_core_plugin.replace('${mod_group}', group).replace('${mod_id}', mod_id)
            //args "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                modClientRun {
                    source sourceSets.main
                    //source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'fml.coreMods.load', mod_core_plugin.replace('${mod_group}', group).replace('${mod_id}', mod_id)
            //args "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                modServerRun {
                    source sourceSets.main
                    //source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            //args "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                modDataRun {
                    source sourceSets.main
                    //source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //compileOnly project(":Common")
    annotationProcessor 'org.spongepowered:mixin:0.8.3-SNAPSHOT:processor'
    embed('org.spongepowered:mixin:0.8.3-SNAPSHOT') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
    implementation('org.apache.commons:commons-compress:1.21')
}

processResources {
    filesMatching('*.mixins.json') {
        expand "refmap_target": "${mod_id}."
    }
}

reobf {
    shadowJar {
        dependencies {
            include(dependency('org.apache.commons:commons-compress:1.21'))
            include(dependency('org.spongepowered:mixin'))
        }

        relocate "org.apache.commons", "shadow.apache.commons"
        classifier ''
    }
}

build.dependsOn reobfShadowJar
jar.finalizedBy('reobfJar')

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.forge.mixins.json"
}

task copyAllArtifacts(type: Copy) {
    from "$buildDir/libs"
    into "$rootDir/artifacts"
    include("*.jar")
    delete("$rootDir/artifacts/*-common-*.jar")
}

build.finalizedBy copyAllArtifacts

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

modrinth {
    debugMode = false
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "QOkEkSap"
    versionNumber = "${minecraft_version}-${project.version}"
    versionType = "release"
    uploadFile = jar
    versionName = "[FORGE] Maintenance Mode 1.12.2 - " + project.version
    gameVersions = ["1.12.2"]
    loaders = [ "forge" ]
}

curseforge {
    if (System.getenv("CURSE_TOKEN") != null) {
        apiKey = System.getenv("CURSE_TOKEN")
    } else {
        apiKey = ""
    }
    project {
        id = "630716"
        releaseType = "release"
        addGameVersion "1.12.2"
        addGameVersion "Forge"
        addGameVersion "Java 8"
        changelogType = "markdown"
        changelog = "**Coming Soon**"
        mainArtifact(jar) {
            displayName = "[Forge] Maintenance Mode 1.12.2 - $project.version"
        }
    }
    options {
        forgeGradleIntegration = false
        debug = false
    }
}

afterEvaluate {
    tasks.curseforge630716.dependsOn reobfShadowJar
}
